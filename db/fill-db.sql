INSERT INTO users VALUES
                        ('Aviz__', 'qcjisd236s', 17.02.2014, 'Пользователь', NULL),
                         ('Welemir1', 'sdf23xck#%d', 30.03.2015, 'Пользователь', 'довольный автоматизатор на удаленке'),
                         ('lifestyle', 'sdhfFHD76', 10.05.2009, 'Пользователь', NULL),
                         ('InvalidCode', '659dhRD98', 26.02.2013, 'Пользователь', 'учитель химии и информатики'),
                         ('iSmokeJC', 'fjid87GF', 21.10.2017, 'Пользователь', 'Программирование микроконтроллеров, 3D печать.'),
                         ('Programming', 'sdkjf&&ssdj56gsFDFG', 12.04.2006, 'Модератор', 'Сертификаты Cisco: CompTIA A+, Cisco CCENT, Cisco CCNA
Сертификаты Microsoft: MCSE: Core Infrastructure, MCSE Productivity Solutions Expert, MCSE: Business Applications');

INSERT INTO sections VALUES
                        ('Про отладку программ', 'Java для начинающих'),
                        ('Сравнение строк (String) в java. Мини гайд для начинающих', 'Java для начинающих'),
                        ('Прозрачные окна в JAVA', 'Java: GUI, Графика')

INSERT INTO topics VALUES
                        ('Про отладку программ', 'Не знаю, потянет ли на "важную" тему, но можно ссылкой на эту, уже кидаться)).' ||
                                                 '
======================================' ||
                                                 '
Отладка программы, при ее создании, может занимать от 2% до 90% времени у разработчика. Это, как примерка костюма у портного. ' ||
                                                 'В идеале, портной, после каждой строчки, должен примерять изделие на фигуру.
Портной во время примерки, в нужных местах, для идеальной подгонки, ставит французские булавки. Программист же, во время ' ||
                                                 'отладки своей программы ставит, на интересующие его строчки кода, так ' ||
                                                 'называемые точки останова - BreakPoint и запускает программу на выполнения ' ||
                                                 'в режиме отладки, в программе называемой Дебагером. Дебагер выполняет ' ||
                                                 'инструкции программы, строчка за строчкой пока не встретит, на какой нибудь ' ||
                                                 'строчке BreakPoint. Встретив BreakPoint дебагер приостанавливает работу ' ||
                                                 'программы, что очень удобно, т.к. программист может просмотреть значение ' ||
                                                 'переменных, стека, ссылок и т.д..
Затем, разработчик может запустить работу программы до следующей точке останова, или по шагам, пройтись до финальной инструкции ' ||
                                                 'кода. Если поставить точку останова на первой строчке, и по шагам пройтись ' ||
                                                 'до последней, то программа, как бы, оживает показывая все свои возможности ' ||
                                                 'в динамике. Это очень интересный и захватывающий процесс!
Во всех современных IDE существует возможность запускать разрабатываемые программы в режиме отладки. Например, в IDEA ' ||
                                                 'эта возможность описана здесь - https://www.jetbrains.com/help... -code.html',
                         'Aviz__', '22.05.2018, 10:27'),
                         ('Про отладку программ', 'можно еще, например, добавить как стримы дебажить', 'lifestyle', '21.01.2019, 11:56'),
                         ('Про отладку программ', 'дебажить стримы не самое простое и интересное занятие, вот подсказочка, как это можно сделать наглядно' ||
                             'ставим бряку на начало стрима ' ||
                             'когда дебаг дойдет до нашей бряки нажимаем кнопочку Trace Stream' ||
                             'немного пошевелив мозгами Идея откроет нам отдельное окошечко где прямо по вкладкам разнесено ' ||
                             'что с элементами стрима происходило, вплоть до того, что стрелочками показано куда элементы переместились при сортировке' ||
                             'Удачи!', 'Welemir1', '30.04.2019, 10:36'),

                          ('Сравнение строк (String) в java. Мини гайд для начинающих', 'Всем привет! ' ||
                                'Одна из самых распространенных ошибок начинающих, выражаемая в очень частых темах типа – ' ||
                                '«не работает условие…», является ошибка сравнения строк (String).' ||
                                'Попробую максимально просто объяснить, что с ними не так.' ||
                                'Во-первых. Строка – это объект. Именно объект, а не примитив (такой как int, например).' ||
                                'Поэтому, даже если две строки содержат одинаковый набор символов, они представляют собой ' ||
                                'два разных объекта! Соответственно «==» будет давать false, объекты-то не одни и те же!' ||
                                'Но иногда такое сравнение работает. Почему? Попробуем разобраться.' ||
                                'String s1 = “hello”;' ||
                                'String s2 = “hello”;' ||
                                'System.out.println(s1 == s2);   //true' ||
                                'При таком создании строк (через литералы), данный набор символов помещается в так называемый пул строк, ' ||
                                'и переменным присваивается ссылка на этот набор. Т.е. ссылки будут одинаковые и == даст true. ' ||
                                '(Это справедливо, если значения переменных известны на этапе компиляции).' ||
                                'Но если мы сделаем, например, так:' ||
                                'String s1 = “hello”;' ||
                                'String s2 = new String (“hello”);' ||
                                'System.out.println(s1 == s2);   //false' ||
                                'Т.к. будет принудительно создан новый объект, переменные будут иметь разные ссылки. ' ||
                                'При присвоении стринговым переменным значений, неизвестных на момент компиляции ' ||
                                '(например в цикле перебора чего-либо) приводит именно к такой ситуации - созданию нового объекта.' ||
                                'Вывод: если не хотите заморачиваться, для сравнения строк нужно использовать метод equals(), ' ||
                                'он посимвольно сравнивает строки и дает true при полном совпадении:' ||
                                'String s1 = “hello”;' ||
                                'String s2 = new String (“hello”);' ||
                                'System.out.println(s1.equals(s2));  // true' ||
                                'Разница в этих подходах в быстродействии (== работает ессно, быстрей), но в большинстве случаев, ' ||
                                'особенно у начинающих это абсолютно не критично.' ||
                                'Надеюсь, объяснил понятно. Всем добра!', 'iSmokeJC', '27.08.2018, 18:08'),
                          ('Сравнение строк (String) в java. Мини гайд для начинающих', 'Иногда строку, допустим полученную ' ||
                                                                                        'с клавиатуры inputUser, нужно сравнивать со строковым литералом, скажем "Yes".' ||
                                                                                        'Это лучше сделать так:' ||
                                                                                        '"Yes".equals(inputUser)', 'Aviz__', '06.09.2018, 12:03'),
                          ('Сравнение строк (String) в java. Мини гайд для начинающих', 'ты главное не объясняй почему) новичкам же не интересно',
                           'Welemir1', '06.09.2018, 12:33'),
                          ('Сравнение строк (String) в java. Мини гайд для начинающих', 'Договорились, про возможный inputUser = null, можешь рассказать сам)).',
                           'Aviz__', '06.09.2018, 12:39'),
                          ('Прозрачные окна в JAVA', 'Вот случайно наткнулся в нете на такие статейки, ранее тоже натыкался , ' ||
                                                     'но там реализация слабовата была, а тут все красиво и культурно)) ' ||
                                                     'так что вот ссылки может кому пригодиться' ||
                                                     '1. http://www.pushing-pixels.org/?p=260' ||
                                                     '2. http://weblogs.java.net/blog/j... e_fad.html', 'lifestyle', '06.07.2010, 01:03'),
                          ('Прозрачные окна в JAVA', 'Интерсно-интересно. Так это родной параметр? Без сторонних библиотек, значит?' ||
                               'Мда.. действительно работает.' ||
                               'Прикольно..' ||
                               'Я у себя подсказки всплывающие так сделал теперь.', 'InvalidCode', '14.01.2016, 23:05'),
                          ('Прозрачные окна в JAVA', 'И без этого можно - Component.setTooltipText()', 'Aviz__', '11.06.2017, 12:13');
